


___________

import { Server } from "socket.io";
import * as fs from "fs";

import { Worker } from "worker_threads";

let modelTraining = true;

export default defineEventHandler(async (event) => {
  if (globalThis.io) return;
  globalThis.io = new Server(event.node.req.socket.server);

  console.log(useNuxtApp())
  const { $net } = useNitroApp();
  console.log($net);

  try {
    train();
  } catch (error) {
    console.error(error);
  }

  io.on("connection", (socket) => {
    console.log("Connected", socket.id);

    socket.on("disconnecting", () => {
      console.log("Disconnected", socket.id);
    });

    socket.on("add-article", async (data, cb) => {
      try {
        const response = await Article.create({
          text: data.text,
          user: data.user,
          marketCategory: data.marketCategory,
          articleCategory: data.articleCategory,
          articleDate: Date.now(),
          articleResult: data.articleResult,
          articleLink: data.articleLink,
        });

        cb(response);
      } catch (error) {
        cb(error);
      }
    });

    socket.on("predict", async (article, cb) => {
      try {
        const prediction = await predict(article);

        cb({ status: 200, prediction });
      } catch (err) {
        cb({ status: 500, message: err.message });
      }
    });

    setInterval(() => {
      socket.emit("model-training-status", modelTraining);
    }, 1000);
  });
});

async function train() {
  const worker = new Worker("./server/worker.mjs");

  worker.postMessage({ command: "train" });

  worker.on("message", (modelJSON) => {
    console.log(modelJSON);
    // net.fromJSON(modelJSON);

    // console.log("Model training completed");
    // worker.terminate();
  });
}

// Define a predict function
const predict = async (articleText) => {
  // Load model from a local JSON file
  const modelData = fs.readFileSync("./model.json");
  const modelJSON = JSON.parse(modelData);
  net.fromJSON(modelJSON);

  // Use model to make a prediction
  const prediction = net.run(preprocessText(articleText));

  return prediction;
};



// Brain plugin

// AI
import brain from "brain.js";

export default defineNitroPlugin(() => {
  // Create neural network
  const net = new brain.recurrent.LSTM();
  return {
    provide: {
      net,
    },
  };
});


"brain.js": "^2.0.0-beta.18",
